"""
Django settings for MyBlog project.

Generated by 'django-admin startproject' using Django 2.2.10.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
import sys
# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
# 创建应用之后，把apps目录加入到sys.path中
sys.path.insert(0, BASE_DIR)
sys.path.insert(1, os.path.join(BASE_DIR, 'apps'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'h7zqo-7dzjyd&&&h-%0n+f=9-jzyriz!zb^zqd^siso&r^%mnu'

# SECURITY WARNING: don't run with debug turned on in production!
# 正式环境不能打开，因为报错多，会把正式目录暴露出来
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # 'apps.users.apps.UsersConfig',
    'haystack',
    'news',
    'course',
    'doc',
    'users',
    'verifications',
    'news.templatetags',
    'admin',

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# 自定义用户模型
AUTH_USER_MODEL = 'users.Users'
# 全局路由表
ROOT_URLCONF = 'MyBlog.urls'

TEMPLATES = [
    {
        # 指向模板引擎，把templates渲染成html
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        # 模板存放的路径
        'DIRS': [os.path.join(BASE_DIR, 'templates')]
        ,
        # 除了查找指定的模板路径也会去查找app下的templates，要把子应用的templates路径加到上面
        'APP_DIRS': True,
        'OPTIONS': {
            # 上下文加载器
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
            # 就不需要{% load static %}
            'builtins': ['django.templatetags.static'],
        },
    },
]
# 指定的wsgi服务器，Django自带的runserver服务器
WSGI_APPLICATION = 'MyBlog.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases
# 项目中从指定文件中获取
DATABASES = {
    # 'default': {
    #     'ENGINE': 'django.db.backends.sqlite3',
    #     'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    # }
    # 'default': {
    #     'ENGINE': 'django.db.backends.mysql',
    #     'NAME': 'mylogs',
    #     'USER': 'fuyi',
    #     'PASSWORD': 'qwe123',
    #     'HOST': '192.168.93.128',
    #     'PORT': 3306,
    # },
    # 方法二
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'OPTIONS': {
            'read_default_file': 'utils/dbs/my.cnf'
        }
    }
}

# redis配置
CACHES = {
    'default': {
        'BACKEND': "django_redis.cache.RedisCache",
        'LOCATION': 'redis://127.0.0.1:6379/0',
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
        }
    },
    'verify_codes': {
        'BACKEND': "django_redis.cache.RedisCache",
         'LOCATION': 'redis://127.0.0.1:6379/1',
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            }
    },
    "session": {
        'BACKEND': "django_redis.cache.RedisCache",
         'LOCATION': 'redis://127.0.0.1:6379/2',
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            }
    },
}

# 将用户的session保存到redis中，而不是sql
SESSION_ENGINE = "django.contrib.sessions.backends.cache"
# 指定缓存redis的别名
SESSION_CACHE_ALIAS = "session"

# 配置日志器，记录网站的日志信息
LOGGING = {
    # 版本
    'version': 1,
    # 是否禁用已存在的日志器
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(module)s %(lineno)d %(message)s'
        },
        'simple': {
            # 报错等级，模块，行数，信息
            'format': '%(levelname)s %(module)s %(lineno)d %(message)s'

        },
    },
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            # 过滤器
            'filters': ['require_debug_true'],
            # 流的形式
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'file': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR, 'logs/dj_mylogs.log'),
            'maxBytes': 300 * 1024 *1024,
            'backupCount': 10,
            'formatter': 'verbose'
        },
    },
    'loggers': {
        'django': {     # 定义了一个名为django的日志器
            'handlers': ['console', 'file'],
            'propagate': True,
            'level': 'INFO'     # 日志器接收的最低日志级别
        }
    }
}
# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        # 用户名和密码相似度校验
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        # 密码长度校验
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        # 其他校验
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        # 数字型密码校验
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

# utc时区
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'
# 用于存放静态文件
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static')
]

# 媒体文件配置
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# 全文搜索引擎haystack 配置
# 不同的搜索引擎，配置不同，详情见官方文档
ELASTICSEARCH_DSL = {
    'default': {
        'hosts': '127.0.0.1:8002'
    }
}
HAYSTACK_CONNECTIONS = {
    'default': {
        'ENGINE': 'haystack.backends.elasticsearch_backend.ElasticsearchSearchEngine',
        'URL': 'http://127.0.0.1:9200/',    # 此处为elasticsearch运行的服务器ip地址和端口
        'INDEX_NAME': 'tzpython',           # 指定elasticserach建立的索引库名称
    },
}

# 搜索结果每页显示数量
HAYSTACK_SEARCH_RESULTS_PER_PAGE = 5
# 实时更新index
HAYSTACK_SIGNAL_PROCESSOR = 'haystack.signals.RealtimeSignalProcessor'

# 站点域名信息
SITE_DOMAIN_PORT = "http://192.168.93.129:8000/"

# 登录url
LOGIN_URL = 'users:login'

# fdfs域名
FASTDFS_SERVER_DOMAIN = 'http://192.168.93.129:888/'
